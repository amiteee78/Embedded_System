
AVRASM ver. 2.1.30  C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm Tue Oct 15 17:06:07 2019

C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1096): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.37 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _message_size=R4
                 	.DEF _message_size_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 013a 	JMP  __RESET
000002 940c 0276 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0016      	.DB  0x16,0x0
                 
                 _0x3:
00002b 4120
00002c 696d
00002d 2074
00002e 614d      	.DB  0x20,0x41,0x6D,0x69,0x74,0x20,0x4D,0x61
00002f 757a
000030 646d
000031 7265
000032 5320      	.DB  0x7A,0x75,0x6D,0x64,0x65,0x72,0x20,0x53
000033 7568
000034 6f76
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 0020      	.DB  0x68,0x75,0x76,0x6F,0x20
                 _0x4:
000036 0000
000037 0000
000038 0000
000039 4f00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4F
00003a 0000
00003b 0700
00003c 0700
00003d 1400      	.DB  0x0,0x0,0x0,0x7,0x0,0x7,0x0,0x14
00003e 147f
00003f 147f
000040 2a24
000041 2a7f      	.DB  0x7F,0x14,0x7F,0x14,0x24,0x2A,0x7F,0x2A
000042 2312
000043 0813
000044 6264
000045 4936      	.DB  0x12,0x23,0x13,0x8,0x64,0x62,0x36,0x49
000046 2255
000047 0050
000048 0305
000049 0000      	.DB  0x55,0x22,0x50,0x0,0x5,0x3,0x0,0x0
00004a 1c00
00004b 4122
00004c 0000
00004d 2241      	.DB  0x0,0x1C,0x22,0x41,0x0,0x0,0x41,0x22
00004e 001c
00004f 0814
000050 083e
000051 0814      	.DB  0x1C,0x0,0x14,0x8,0x3E,0x8,0x14,0x8
000052 3e08
000053 0808
000054 5000
000055 0030      	.DB  0x8,0x3E,0x8,0x8,0x0,0x50,0x30,0x0
000056 0000
000057 0808
000058 0808
000059 6000      	.DB  0x0,0x0,0x8,0x8,0x8,0x8,0x0,0x60
00005a 0060
00005b 2000
00005c 0810
00005d 0204      	.DB  0x60,0x0,0x0,0x20,0x10,0x8,0x4,0x2
00005e 513e
00005f 4549
000060 003e
000061 7f42      	.DB  0x3E,0x51,0x49,0x45,0x3E,0x0,0x42,0x7F
000062 0040
000063 6142
000064 4951
000065 2146      	.DB  0x40,0x0,0x42,0x61,0x51,0x49,0x46,0x21
000066 4541
000067 314b
000068 1418
000069 7f12      	.DB  0x41,0x45,0x4B,0x31,0x18,0x14,0x12,0x7F
00006a 2710
00006b 4545
00006c 3945
00006d 4a3c      	.DB  0x10,0x27,0x45,0x45,0x45,0x39,0x3C,0x4A
00006e 4949
00006f 0330
000070 0971
000071 0305      	.DB  0x49,0x49,0x30,0x3,0x71,0x9,0x5,0x3
000072 4936
000073 4949
000074 0636
000075 4949      	.DB  0x36,0x49,0x49,0x49,0x36,0x6,0x49,0x49
000076 1e29
000077 6c00
000078 006c
000079 0000      	.DB  0x29,0x1E,0x0,0x6C,0x6C,0x0,0x0,0x0
00007a 3656
00007b 0000
00007c 1408
00007d 4122      	.DB  0x56,0x36,0x0,0x0,0x8,0x14,0x22,0x41
00007e 1400
00007f 1414
000080 1414
000081 4100      	.DB  0x0,0x14,0x14,0x14,0x14,0x14,0x0,0x41
000082 1422
000083 0208
000084 5101
000085 0609      	.DB  0x22,0x14,0x8,0x2,0x1,0x51,0x9,0x6
000086 4932
000087 4179
000088 7e3e
000089 1111      	.DB  0x32,0x49,0x79,0x41,0x3E,0x7E,0x11,0x11
00008a 7e11
00008b 497f
00008c 4949
00008d 3e3e      	.DB  0x11,0x7E,0x7F,0x49,0x49,0x49,0x3E,0x3E
00008e 4141
00008f 2241
000090 417f
000091 4141      	.DB  0x41,0x41,0x41,0x22,0x7F,0x41,0x41,0x41
000092 7f3e
000093 4949
000094 4949
000095 097f      	.DB  0x3E,0x7F,0x49,0x49,0x49,0x49,0x7F,0x9
000096 0909
000097 3e01
000098 4941
000099 3a49      	.DB  0x9,0x9,0x1,0x3E,0x41,0x49,0x49,0x3A
00009a 087f
00009b 0808
00009c 417f
00009d 7f41      	.DB  0x7F,0x8,0x8,0x8,0x7F,0x41,0x41,0x7F
00009e 4141
00009f 4130
0000a0 3f41
0000a1 7f01      	.DB  0x41,0x41,0x30,0x41,0x41,0x3F,0x1,0x7F
0000a2 1408
0000a3 4122
0000a4 407f
0000a5 4040      	.DB  0x8,0x14,0x22,0x41,0x7F,0x40,0x40,0x40
0000a6 7f40
0000a7 0c02
0000a8 7f02
0000a9 047f      	.DB  0x40,0x7F,0x2,0xC,0x2,0x7F,0x7F,0x4
0000aa 1008
0000ab 3e7f
0000ac 4141
0000ad 3e41      	.DB  0x8,0x10,0x7F,0x3E,0x41,0x41,0x41,0x3E
0000ae 097f
0000af 0909
0000b0 3e06
0000b1 5141      	.DB  0x7F,0x9,0x9,0x9,0x6,0x3E,0x41,0x51
0000b2 5e21
0000b3 097f
0000b4 1909
0000b5 4666      	.DB  0x21,0x5E,0x7F,0x9,0x9,0x19,0x66,0x46
0000b6 4949
0000b7 3149
0000b8 0101
0000b9 017f      	.DB  0x49,0x49,0x49,0x31,0x1,0x1,0x7F,0x1
0000ba 3f01
0000bb 4040
0000bc 3f40
0000bd 300f      	.DB  0x1,0x3F,0x40,0x40,0x40,0x3F,0xF,0x30
0000be 3040
0000bf 3f0f
0000c0 3840
0000c1 3f40      	.DB  0x40,0x30,0xF,0x3F,0x40,0x38,0x40,0x3F
0000c2 1463
0000c3 1408
0000c4 0363
0000c5 7804      	.DB  0x63,0x14,0x8,0x14,0x63,0x3,0x4,0x78
0000c6 0304
0000c7 5161
0000c8 4549
0000c9 7f43      	.DB  0x4,0x3,0x61,0x51,0x49,0x45,0x43,0x7F
0000ca 4141
0000cb 0000
0000cc 0402
0000cd 1008      	.DB  0x41,0x41,0x0,0x0,0x2,0x4,0x8,0x10
0000ce 0020
0000cf 4100
0000d0 7f41
0000d1 0204      	.DB  0x20,0x0,0x0,0x41,0x41,0x7F,0x4,0x2
0000d2 0201
0000d3 4004
0000d4 4040
0000d5 4040      	.DB  0x1,0x2,0x4,0x40,0x40,0x40,0x40,0x40
0000d6 0100
0000d7 0402
0000d8 2000
0000d9 5454      	.DB  0x0,0x1,0x2,0x4,0x0,0x20,0x54,0x54
0000da 7854
0000db 487f
0000dc 4444
0000dd 3838      	.DB  0x54,0x78,0x7F,0x48,0x44,0x44,0x38,0x38
0000de 4444
0000df 2044
0000e0 4438
0000e1 4844      	.DB  0x44,0x44,0x44,0x20,0x38,0x44,0x44,0x48
0000e2 387f
0000e3 5454
0000e4 1854
0000e5 7e08      	.DB  0x7F,0x38,0x54,0x54,0x54,0x18,0x8,0x7E
0000e6 0109
0000e7 0c02
0000e8 5252
0000e9 3e52      	.DB  0x9,0x1,0x2,0xC,0x52,0x52,0x52,0x3E
0000ea 087f
0000eb 0404
0000ec 0078
0000ed 7d44      	.DB  0x7F,0x8,0x4,0x4,0x78,0x0,0x44,0x7D
0000ee 0040
0000ef 4020
0000f0 3d44
0000f1 7f00      	.DB  0x40,0x0,0x20,0x40,0x44,0x3D,0x0,0x7F
0000f2 2810
0000f3 0044
0000f4 4100
0000f5 407f      	.DB  0x10,0x28,0x44,0x0,0x0,0x41,0x7F,0x40
0000f6 7800
0000f7 0804
0000f8 7804
0000f9 087c      	.DB  0x0,0x78,0x4,0x8,0x4,0x78,0x7C,0x8
0000fa 0404
0000fb 3878
0000fc 4444
0000fd 3844      	.DB  0x4,0x4,0x78,0x38,0x44,0x44,0x44,0x38
0000fe 147c
0000ff 1414
000100 0808
000101 1414      	.DB  0x7C,0x14,0x14,0x14,0x8,0x8,0x14,0x14
000102 007c
000103 087c
000104 0404
000105 4808      	.DB  0x7C,0x0,0x7C,0x8,0x4,0x4,0x8,0x48
000106 5454
000107 2054
000108 3f04
000109 4044      	.DB  0x54,0x54,0x54,0x20,0x4,0x3F,0x44,0x40
00010a 3c20
00010b 4040
00010c 7c20
00010d 201c      	.DB  0x20,0x3C,0x40,0x40,0x20,0x7C,0x1C,0x20
00010e 2040
00010f 3c1c
000110 3040
000111 3c40      	.DB  0x40,0x20,0x1C,0x3C,0x40,0x30,0x40,0x3C
000112 2844
000113 2810
000114 0c44
000115 5050      	.DB  0x44,0x28,0x10,0x28,0x44,0xC,0x50,0x50
000116 3c50
000117 6444
000118 4c54
000119 0044      	.DB  0x50,0x3C,0x44,0x64,0x54,0x4C,0x44,0x0
00011a 3608
00011b 0041
00011c 0000
00011d 007f      	.DB  0x8,0x36,0x41,0x0,0x0,0x0,0x7F,0x0
00011e 0000
00011f 3641
000120 0008
000121 0408      	.DB  0x0,0x0,0x41,0x36,0x8,0x0,0x8,0x4
000122 0804
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1195): warning: .cseg .db misalignment - padding zero byte
000123 0004      	.DB  0x4,0x8,0x4
                 _0x2000000:
000124 4e2d
000125 4e41
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1197): warning: .cseg .db misalignment - padding zero byte
000126 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2020060:
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1199): warning: .cseg .db misalignment - padding zero byte
000127 0001      	.DB  0x1
                 _0x2020000:
000128 4e2d
000129 4e41
00012a 4900
00012b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\amite\Dropbox\IICT\SPI\C_code\dot_mat_spi\dot_mat_spi\Debug\List\dot_mat_spi.asm(1202): warning: .cseg .db misalignment - padding zero byte
00012c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00012d 0002      	.DW  0x02
00012e 0004      	.DW  0x04
00012f 0054      	.DW  __REG_VARS*2
                 
000130 0015      	.DW  0x15
000131 0270      	.DW  _message
000132 0056      	.DW  _0x3*2
                 
000133 01db      	.DW  0x1DB
000134 0286      	.DW  _characters
000135 006c      	.DW  _0x4*2
                 
000136 0001      	.DW  0x01
000137 0466      	.DW  __seed_G101
000138 024e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000139 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00013a 94f8      	CLI
00013b 27ee      	CLR  R30
00013c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00013d e0f1      	LDI  R31,1
00013e bffb      	OUT  GICR,R31
00013f bfeb      	OUT  GICR,R30
000140 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000141 e08d      	LDI  R24,(14-2)+1
000142 e0a2      	LDI  R26,2
000143 27bb      	CLR  R27
                 __CLEAR_REG:
000144 93ed      	ST   X+,R30
000145 958a      	DEC  R24
000146 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000147 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000148 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000149 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00014a 93ed      	ST   X+,R30
00014b 9701      	SBIW R24,1
00014c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00014d e5ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00014e e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00014f 9185      	LPM  R24,Z+
000150 9195      	LPM  R25,Z+
000151 9700      	SBIW R24,0
000152 f061      	BREQ __GLOBAL_INI_END
000153 91a5      	LPM  R26,Z+
000154 91b5      	LPM  R27,Z+
000155 9005      	LPM  R0,Z+
000156 9015      	LPM  R1,Z+
000157 01bf      	MOVW R22,R30
000158 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000159 9005      	LPM  R0,Z+
00015a 920d      	ST   X+,R0
00015b 9701      	SBIW R24,1
00015c f7e1      	BRNE __GLOBAL_INI_LOOP
00015d 01fb      	MOVW R30,R22
00015e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00015f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000160 bfed      	OUT  SPL,R30
000161 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000162 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000163 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000164 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000165 940c 02b0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ; *
                 ; * dot_mat_spi.c
                 ; * Created: 10/14/2019 1:53:44 PM
                 ; * Author: Amit Mazumder Shuvo
                 ; * Version 1.0
                 ; *
                 ; */
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define SS PORTB4
                 ;#define MOSI PORTB5
                 ;#define MISO PORTB6
                 ;#define SCK PORTB7
                 ;#define DEVICE_NUM 2
                 ;#define DELAY 50
                 ;
                 ;#define SLAVE_SEL PORTB &= ~(1<<SS) //Slave Select(Active Low)
                 ;#define SLAVE_DESEL PORTB |= (1<<SS)//SLave Deselect(Active High)
                 ;
                 ;unsigned char buffer[DEVICE_NUM*8]; // buffer for text scrolling
                 ;//const char message[] = " Institute of Information & Communication Technology, BUET, Dhaka-1211 "; // message to be dis ...
                 ;const char message[] = " Amit Mazumder Shuvo "; // message to be displayed
                 
                 	.DSEG
                 ;//const char message[] = "Tahsin Mostafiz has nailed the professors of the USA."; // message to be displayed
                 ;unsigned int message_size = sizeof(message); // size of message array
                 ;
                 ;const char characters[96][5] = {
                 ;	{0b00000000,0b00000000,0b00000000,0b00000000,0b00000000}, // space
                 ;	{0b00000000,0b00000000,0b01001111,0b00000000,0b00000000}, // !
                 ;	{0b00000000,0b00000111,0b00000000,0b00000111,0b00000000}, // "
                 ;	{0b00010100,0b01111111,0b00010100,0b01111111,0b00010100}, // #
                 ;	{0b00100100,0b00101010,0b01111111,0b00101010,0b00010010}, // $
                 ;	{0b00100011,0b00010011,0b00001000,0b01100100,0b01100010}, // %
                 ;	{0b00110110,0b01001001,0b01010101,0b00100010,0b01010000}, // &
                 ;	{0b00000000,0b00000101,0b00000011,0b00000000,0b00000000}, // '
                 ;	{0b00000000,0b00011100,0b00100010,0b01000001,0b00000000}, // (
                 ;	{0b00000000,0b01000001,0b00100010,0b00011100,0b00000000}, // )
                 ;	{0b00010100,0b00001000,0b00111110,0b00001000,0b00010100}, // *
                 ;	{0b00001000,0b00001000,0b00111110,0b00001000,0b00001000}, // +
                 ;	{0b00000000,0b01010000,0b00110000,0b00000000,0b00000000}, // ,
                 ;	{0b00000000,0b00001000,0b00001000,0b00001000,0b00001000}, // -
                 ;	{0b00000000,0b01100000,0b01100000,0b00000000,0b00000000}, // .
                 ;	{0b00100000,0b00010000,0b00001000,0b00000100,0b00000010}, // /
                 ;	{0b00111110,0b01010001,0b01001001,0b01000101,0b00111110}, // 0
                 ;	{0b00000000,0b01000010,0b01111111,0b01000000,0b00000000}, // 1
                 ;	{0b01000010,0b01100001,0b01010001,0b01001001,0b01000110}, // 2
                 ;	{0b00100001,0b01000001,0b01000101,0b01001011,0b00110001}, // 3
                 ;	{0b00011000,0b00010100,0b00010010,0b01111111,0b00010000}, // 4
                 ;	{0b00100111,0b01000101,0b01000101,0b01000101,0b00111001}, // 5
                 ;	{0b00111100,0b01001010,0b01001001,0b01001001,0b00110000}, // 6
                 ;	{0b00000011,0b01110001,0b00001001,0b00000101,0b00000011}, // 7
                 ;	{0b00110110,0b01001001,0b01001001,0b01001001,0b00110110}, // 8
                 ;	{0b00000110,0b01001001,0b01001001,0b00101001,0b00011110}, // 9
                 ;	{0b00000000,0b01101100,0b01101100,0b00000000,0b00000000}, // :
                 ;	{0b00000000,0b01010110,0b00110110,0b00000000,0b00000000}, // ;
                 ;	{0b00001000,0b00010100,0b00100010,0b01000001,0b00000000}, // <
                 ;	{0b00010100,0b00010100,0b00010100,0b00010100,0b00010100}, // =
                 ;	{0b00000000,0b01000001,0b00100010,0b00010100,0b00001000}, // >
                 ;	{0b00000010,0b00000001,0b01010001,0b00001001,0b00000110}, // ?
                 ;	{0b00110010,0b01001001,0b01111001,0b01000001,0b00111110}, // @
                 ;	{0b01111110,0b00010001,0b00010001,0b00010001,0b01111110}, // A
                 ;	{0b01111111,0b01001001,0b01001001,0b01001001,0b00111110}, // B
                 ;	{0b00111110,0b01000001,0b01000001,0b01000001,0b00100010}, // C
                 ;	{0b01111111,0b01000001,0b01000001,0b01000001,0b00111110}, // D
                 ;	{0b01111111,0b01001001,0b01001001,0b01001001,0b01001001}, // E
                 ;	{0b01111111,0b00001001,0b00001001,0b00001001,0b00000001}, // F
                 ;	{0b00111110,0b01000001,0b01001001,0b01001001,0b00111010}, // G
                 ;	{0b01111111,0b00001000,0b00001000,0b00001000,0b01111111}, // H
                 ;	{0b01000001,0b01000001,0b01111111,0b01000001,0b01000001}, // I
                 ;	{0b00110000,0b01000001,0b01000001,0b00111111,0b00000001}, // J
                 ;	{0b01111111,0b00001000,0b00010100,0b00100010,0b01000001}, // K
                 ;	{0b01111111,0b01000000,0b01000000,0b01000000,0b01000000}, // L
                 ;	{0b01111111,0b00000010,0b00001100,0b00000010,0b01111111}, // M
                 ;	{0b01111111,0b00000100,0b00001000,0b00010000,0b01111111}, // N
                 ;	{0b00111110,0b01000001,0b01000001,0b01000001,0b00111110}, // O
                 ;	{0b01111111,0b00001001,0b00001001,0b00001001,0b00000110}, // P
                 ;	{0b00111110,0b01000001,0b01010001,0b00100001,0b01011110}, // Q
                 ;	{0b01111111,0b00001001,0b00001001,0b00011001,0b01100110}, // R
                 ;	{0b01000110,0b01001001,0b01001001,0b01001001,0b00110001}, // S
                 ;	{0b00000001,0b00000001,0b01111111,0b00000001,0b00000001}, // T
                 ;	{0b00111111,0b01000000,0b01000000,0b01000000,0b00111111}, // U
                 ;	{0b00001111,0b00110000,0b01000000,0b00110000,0b00001111}, // V
                 ;	{0b00111111,0b01000000,0b00111000,0b01000000,0b00111111}, // W
                 ;	{0b01100011,0b00010100,0b00001000,0b00010100,0b01100011}, // X
                 ;	{0b00000011,0b00000100,0b01111000,0b00000100,0b00000011}, // Y
                 ;	{0b01100001,0b01010001,0b01001001,0b01000101,0b01000011}, // Z
                 ;	{0b01111111,0b01000001,0b01000001,0b00000000,0b00000000}, // [
                 ;	{0b00000010,0b00000100,0b00001000,0b00010000,0b00100000}, // '\'
                 ;	{0b00000000,0b00000000,0b01000001,0b01000001,0b01111111}, // ]
                 ;	{0b00000100,0b00000010,0b00000001,0b00000010,0b00000100}, // ^
                 ;	{0b01000000,0b01000000,0b01000000,0b01000000,0b01000000}, // _
                 ;	{0b00000000,0b00000001,0b00000010,0b00000100,0b00000000}, // `
                 ;	{0b00100000,0b01010100,0b01010100,0b01010100,0b01111000}, // a
                 ;	{0b01111111,0b01001000,0b01000100,0b01000100,0b00111000}, // 0b
                 ;	{0b00111000,0b01000100,0b01000100,0b01000100,0b00100000}, // c
                 ;	{0b00111000,0b01000100,0b01000100,0b01001000,0b01111111}, // d
                 ;	{0b00111000,0b01010100,0b01010100,0b01010100,0b00011000}, // e
                 ;	{0b00001000,0b01111110,0b00001001,0b00000001,0b00000010}, // f
                 ;	{0b00001100,0b01010010,0b01010010,0b01010010,0b00111110}, // g
                 ;	{0b01111111,0b00001000,0b00000100,0b00000100,0b01111000}, // h
                 ;	{0b00000000,0b01000100,0b01111101,0b01000000,0b00000000}, // i
                 ;	{0b00100000,0b01000000,0b01000100,0b00111101,0b00000000}, // j
                 ;	{0b01111111,0b00010000,0b00101000,0b01000100,0b00000000}, // k
                 ;	{0b00000000,0b01000001,0b01111111,0b01000000,0b00000000}, // l
                 ;	{0b01111000,0b00000100,0b00001000,0b00000100,0b01111000}, // m
                 ;	{0b01111100,0b00001000,0b00000100,0b00000100,0b01111000}, // n
                 ;	{0b00111000,0b01000100,0b01000100,0b01000100,0b00111000}, // o
                 ;	{0b01111100,0b00010100,0b00010100,0b00010100,0b00001000}, // p
                 ;	{0b00001000,0b00010100,0b00010100,0b01111100,0b00000000}, // q
                 ;	{0b01111100,0b00001000,0b00000100,0b00000100,0b00001000}, // r
                 ;	{0b01001000,0b01010100,0b01010100,0b01010100,0b00100000}, // s
                 ;	{0b00000100,0b00111111,0b01000100,0b01000000,0b00100000}, // t
                 ;	{0b00111100,0b01000000,0b01000000,0b00100000,0b01111100}, // u
                 ;	{0b00011100,0b00100000,0b01000000,0b00100000,0b00011100}, // v
                 ;	{0b00111100,0b01000000,0b00110000,0b01000000,0b00111100}, // w
                 ;	{0b01000100,0b00101000,0b00010000,0b00101000,0b01000100}, // x
                 ;	{0b00001100,0b01010000,0b01010000,0b01010000,0b00111100}, // y
                 ;	{0b01000100,0b01100100,0b01010100,0b01001100,0b01000100}, // z
                 ;	{0b00000000,0b00001000,0b00110110,0b01000001,0b00000000}, // {
                 ;	{0b00000000,0b00000000,0b01111111,0b00000000,0b00000000}, // |
                 ;	{0b00000000,0b01000001,0b00110110,0b00001000,0b00000000}, // }
                 ;	{0b00001000,0b00000100,0b00000100,0b00001000,0b00000100} // ~
                 ;};
                 ;
                 ;/**********************************EXTERNAL INTERRUPT INITIALIZATION FUNCTION**********************************/
                 ;void init_interrupt(void)
                 ; 0000 0083 {
                 
                 	.CSEG
                 _init_interrupt:
                 ; .FSTART _init_interrupt
                 ; 0000 0084 	GICR |= (0<<INT1) | (1<<INT0) | (1<<INT2); //Enabling external interrupt0
000167 b7eb      	IN   R30,0x3B
000168 66e0      	ORI  R30,LOW(0x60)
000169 bfeb      	OUT  0x3B,R30
                 ; 0000 0085 	MCUCR |= (1<<ISC01) | (0<<ISC00); //falling edge triggered interrupt
00016a b7e5      	IN   R30,0x35
00016b 60e2      	ORI  R30,2
00016c bfe5      	OUT  0x35,R30
                 ; 0000 0086 	#asm("sei"); //global interrupt enable
00016d 9478      	SEI
                 ; 0000 0087 }
00016e 9508      	RET
                 ; .FEND
                 ;
                 ;/**********************************SPI INITIALIZATION FUNCTION**********************************/
                 ;void init_spi(void)
                 ; 0000 008B {
                 _init_spi:
                 ; .FSTART _init_spi
                 ; 0000 008C 	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS); //Set MOSI,SCK & SS pin as output
00016f b3e7      	IN   R30,0x17
000170 6be0      	ORI  R30,LOW(0xB0)
000171 bbe7      	OUT  0x17,R30
                 ; 0000 008D 	PORTB |= (1<<SS); // SS pin unselected
000172 9ac4      	SBI  0x18,4
                 ; 0000 008E 	SPCR |= (1<< MSTR) | (1<< SPE) | (1<<SPR0); // Set AVR SPI as master, SPI enable & clock Focs/4
000173 b1ed      	IN   R30,0xD
000174 65e1      	ORI  R30,LOW(0x51)
000175 b9ed      	OUT  0xD,R30
                 ; 0000 008F }
000176 9508      	RET
                 ; .FEND
                 ;
                 ;/*************************COMMAND & DATA TRANSFER FUNCTION**************************/
                 ;void write_word (unsigned char cmd, unsigned char data)
                 ; 0000 0093 {
                 _write_word:
                 ; .FSTART _write_word
                 ; 0000 0094 
                 ; 0000 0095 	SPDR = cmd;
000177 931a      	ST   -Y,R17
000178 930a      	ST   -Y,R16
000179 2f1a      	MOV  R17,R26
00017a 810a      	LDD  R16,Y+2
                 ;	cmd -> R16
                 ;	data -> R17
00017b b90f      	OUT  0xF,R16
                 ; 0000 0096 	while (!(SPSR & (1<< SPIF)));
                 _0x5:
00017c 9b77      	SBIS 0xE,7
00017d cffe      	RJMP _0x5
                 ; 0000 0097 
                 ; 0000 0098 	SPDR = data;
00017e b91f      	OUT  0xF,R17
                 ; 0000 0099 	while (!(SPSR & (1<< SPIF)));
                 _0x8:
00017f 9b77      	SBIS 0xE,7
000180 cffe      	RJMP _0x8
                 ; 0000 009A 
                 ; 0000 009B }
000181 8119      	LDD  R17,Y+1
000182 8108      	LDD  R16,Y+0
000183 9623      	ADIW R28,3
000184 9508      	RET
                 ; .FEND
                 ;
                 ;/*************************8x8 LED DOT MATRIX INITIALIZATION FUNCTION**************************/
                 ;void init_matrix(void)
                 ; 0000 009F {
                 _init_matrix:
                 ; .FSTART _init_matrix
                 ; 0000 00A0 	unsigned short int m;
                 ; 0000 00A1 
                 ; 0000 00A2 	SLAVE_SEL;
000185 d12d      	RCALL SUBOPT_0x0
                 ;	m -> R16,R17
                 ; 0000 00A3 	for (m=0;m<DEVICE_NUM;m++)
                 _0xC:
                +
000186 3002     +CPI R16 , LOW ( 2 )
000187 e0e0     +LDI R30 , HIGH ( 2 )
000188 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000189 f438      	BRSH _0xD
                 ; 0000 00A4 	{
                 ; 0000 00A5 		write_word(0x0A, 0x0F); // set intensity for all devices
00018a e0ea      	LDI  R30,LOW(10)
00018b 93ea      	ST   -Y,R30
00018c e0af      	LDI  R26,LOW(15)
00018d dfe9      	RCALL _write_word
                 ; 0000 00A6 	}
                +
00018e 5f0f     +SUBI R16 , LOW ( - 1 )
00018f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000190 cff5      	RJMP _0xC
                 _0xD:
                 ; 0000 00A7 	SLAVE_DESEL;
000191 d127      	RCALL SUBOPT_0x1
                 ; 0000 00A8 	SLAVE_SEL;
                 ; 0000 00A9 	for (m=0;m<DEVICE_NUM;m++)
                 _0xF:
                +
000192 3002     +CPI R16 , LOW ( 2 )
000193 e0e0     +LDI R30 , HIGH ( 2 )
000194 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000195 f438      	BRSH _0x10
                 ; 0000 00AA 	{
                 ; 0000 00AB 		write_word(0x09, 0x00); // set no decoding mode for all devices
000196 e0e9      	LDI  R30,LOW(9)
000197 93ea      	ST   -Y,R30
000198 e0a0      	LDI  R26,LOW(0)
000199 dfdd      	RCALL _write_word
                 ; 0000 00AC 	}
                +
00019a 5f0f     +SUBI R16 , LOW ( - 1 )
00019b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00019c cff5      	RJMP _0xF
                 _0x10:
                 ; 0000 00AD 	SLAVE_DESEL;
00019d d11b      	RCALL SUBOPT_0x1
                 ; 0000 00AE 	SLAVE_SEL;
                 ; 0000 00AF 	for (m=0;m<DEVICE_NUM;m++)
                 _0x12:
                +
00019e 3002     +CPI R16 , LOW ( 2 )
00019f e0e0     +LDI R30 , HIGH ( 2 )
0001a0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001a1 f438      	BRSH _0x13
                 ; 0000 00B0 	{
                 ; 0000 00B1 		write_word(0x0B, 0x07); // set scan limit (0-7) for 1-8 dots for all devices
0001a2 e0eb      	LDI  R30,LOW(11)
0001a3 93ea      	ST   -Y,R30
0001a4 e0a7      	LDI  R26,LOW(7)
0001a5 dfd1      	RCALL _write_word
                 ; 0000 00B2 	}
                +
0001a6 5f0f     +SUBI R16 , LOW ( - 1 )
0001a7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001a8 cff5      	RJMP _0x12
                 _0x13:
                 ; 0000 00B3 	SLAVE_DESEL;
0001a9 d10f      	RCALL SUBOPT_0x1
                 ; 0000 00B4 	SLAVE_SEL;
                 ; 0000 00B5 	for (m=0;m<DEVICE_NUM;m++)
                 _0x15:
                +
0001aa 3002     +CPI R16 , LOW ( 2 )
0001ab e0e0     +LDI R30 , HIGH ( 2 )
0001ac 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001ad f438      	BRSH _0x16
                 ; 0000 00B6 	{
                 ; 0000 00B7 		write_word(0x0C, 0x01); // turn display on for all devices
0001ae e0ec      	LDI  R30,LOW(12)
0001af 93ea      	ST   -Y,R30
0001b0 e0a1      	LDI  R26,LOW(1)
0001b1 dfc5      	RCALL _write_word
                 ; 0000 00B8 	}
                +
0001b2 5f0f     +SUBI R16 , LOW ( - 1 )
0001b3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001b4 cff5      	RJMP _0x15
                 _0x16:
                 ; 0000 00B9 	SLAVE_DESEL;
0001b5 d103      	RCALL SUBOPT_0x1
                 ; 0000 00BA 	SLAVE_SEL;
                 ; 0000 00BB 	for (m=0;m<DEVICE_NUM;m++)
                 _0x18:
                +
0001b6 3002     +CPI R16 , LOW ( 2 )
0001b7 e0e0     +LDI R30 , HIGH ( 2 )
0001b8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b9 f438      	BRSH _0x19
                 ; 0000 00BC 	{
                 ; 0000 00BD 		write_word(0x0F, 0x00); // disable display test for all devices
0001ba e0ef      	LDI  R30,LOW(15)
0001bb 93ea      	ST   -Y,R30
0001bc e0a0      	LDI  R26,LOW(0)
0001bd dfb9      	RCALL _write_word
                 ; 0000 00BE 	}
                +
0001be 5f0f     +SUBI R16 , LOW ( - 1 )
0001bf 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001c0 cff5      	RJMP _0x18
                 _0x19:
                 ; 0000 00BF 	SLAVE_DESEL;
0001c1 c0b0      	RJMP _0x20A0002
                 ; 0000 00C0 }
                 ; .FEND
                 ;
                 ;/*************************8x8 DOT MATRIX CLEAR FUNCTION**************************/
                 ;void clear_matrix(void)
                 ; 0000 00C4 {
                 _clear_matrix:
                 ; .FSTART _clear_matrix
                 ; 0000 00C5 	unsigned short int i,j;
                 ; 0000 00C6 
                 ; 0000 00C7 	for (i=0;i<8;i++)
0001c2 d10b      	RCALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
0001c3 e000     +LDI R16 , LOW ( 0 )
0001c4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1B:
                +
0001c5 3008     +CPI R16 , LOW ( 8 )
0001c6 e0e0     +LDI R30 , HIGH ( 8 )
0001c7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0001c8 f498      	BRSH _0x1C
                 ; 0000 00C8 	{
                 ; 0000 00C9 		SLAVE_SEL;
0001c9 98c4      	CBI  0x18,4
                 ; 0000 00CA 		for (j=0;j<DEVICE_NUM;j++)
                +
0001ca e020     +LDI R18 , LOW ( 0 )
0001cb e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1E:
                +
0001cc 3022     +CPI R18 , LOW ( 2 )
0001cd e0e0     +LDI R30 , HIGH ( 2 )
0001ce 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001cf f440      	BRSH _0x1F
                 ; 0000 00CB 		{
                 ; 0000 00CC 			write_word(i+1,0x00); //clear data for all devices
0001d0 2fe0      	MOV  R30,R16
0001d1 5fef      	SUBI R30,-LOW(1)
0001d2 93ea      	ST   -Y,R30
0001d3 e0a0      	LDI  R26,LOW(0)
0001d4 dfa2      	RCALL _write_word
                 ; 0000 00CD 		}
                +
0001d5 5f2f     +SUBI R18 , LOW ( - 1 )
0001d6 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001d7 cff4      	RJMP _0x1E
                 _0x1F:
                 ; 0000 00CE 		SLAVE_DESEL;
0001d8 9ac4      	SBI  0x18,4
                 ; 0000 00CF 	}
                +
0001d9 5f0f     +SUBI R16 , LOW ( - 1 )
0001da 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001db cfe9      	RJMP _0x1B
                 _0x1C:
                 ; 0000 00D0 }
0001dc c086      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;/*************************BUFFER INTIALIZATION FUNCTION**************************/
                 ;void init_buffer(void)
                 ; 0000 00D4 {
                 _init_buffer:
                 ; .FSTART _init_buffer
                 ; 0000 00D5 	unsigned short int i;
                 ; 0000 00D6 	for (i=0;i<DEVICE_NUM*8;i++)
0001dd 931a      	ST   -Y,R17
0001de 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0001df e000     +LDI R16 , LOW ( 0 )
0001e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x21:
                +
0001e1 3100     +CPI R16 , LOW ( 16 )
0001e2 e0e0     +LDI R30 , HIGH ( 16 )
0001e3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
0001e4 f448      	BRSH _0x22
                 ; 0000 00D7 	{
                 ; 0000 00D8 		buffer[i] = 0x00; //buffer initialization for all devices
0001e5 e6a0      	LDI  R26,LOW(_buffer)
0001e6 e0b2      	LDI  R27,HIGH(_buffer)
0001e7 0fa0      	ADD  R26,R16
0001e8 1fb1      	ADC  R27,R17
0001e9 e0e0      	LDI  R30,LOW(0)
0001ea 93ec      	ST   X,R30
                 ; 0000 00D9 	}
                +
0001eb 5f0f     +SUBI R16 , LOW ( - 1 )
0001ec 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001ed cff3      	RJMP _0x21
                 _0x22:
                 ; 0000 00DA }
0001ee c084      	RJMP _0x20A0001
                 ; .FEND
                 ;
                 ;/*************************8x8 LED DOT MATRIX COLUMN BUFFERING FUNCTION**************************/
                 ;void push_buffer(unsigned char c)
                 ; 0000 00DE {
                 _push_buffer:
                 ; .FSTART _push_buffer
                 ; 0000 00DF 	unsigned short int i;
                 ; 0000 00E0 	for (i=0;i<DEVICE_NUM*8-1;i++)
0001ef d0de      	RCALL __SAVELOCR4
0001f0 2f3a      	MOV  R19,R26
                 ;	c -> R19
                 ;	i -> R16,R17
                +
0001f1 e000     +LDI R16 , LOW ( 0 )
0001f2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x24:
                +
0001f3 300f     +CPI R16 , LOW ( 15 )
0001f4 e0e0     +LDI R30 , HIGH ( 15 )
0001f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
0001f6 f458      	BRSH _0x25
                 ; 0000 00E1 	{
                 ; 0000 00E2 		buffer[i] = buffer[i+1]; //shifting a column to the previous buffer element for all devices
0001f7 01d8      	MOVW R26,R16
0001f8 5aa0      	SUBI R26,LOW(-_buffer)
0001f9 4fbd      	SBCI R27,HIGH(-_buffer)
0001fa 01f8      	MOVW R30,R16
                +
0001fb 59ef     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
0001fc 4ffd     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
0001fd 81e0      	LD   R30,Z
0001fe 93ec      	ST   X,R30
                 ; 0000 00E3 	}
                +
0001ff 5f0f     +SUBI R16 , LOW ( - 1 )
000200 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000201 cff1      	RJMP _0x24
                 _0x25:
                 ; 0000 00E4 	buffer[DEVICE_NUM*8-1] = c;	//pushing the current column to the last buffer element
                +
000202 9330 026f+STS _buffer + ( 15 ) , R19
                 	__PUTBMRN _buffer,15,19
                 ; 0000 00E5 }
000204 c05e      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;/*************************CURRENT BUFFER ELEMENT DISPLAY FUNCTION**************************/
                 ;void disp_buffer(void)
                 ; 0000 00E9 {
                 _disp_buffer:
                 ; .FSTART _disp_buffer
                 ; 0000 00EA 	unsigned short int i,j,k;
                 ; 0000 00EB 	for (i=0;i<DEVICE_NUM;i++)
000205 d0c6      	RCALL __SAVELOCR6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
                +
000206 e000     +LDI R16 , LOW ( 0 )
000207 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x27:
                +
000208 3002     +CPI R16 , LOW ( 2 )
000209 e0e0     +LDI R30 , HIGH ( 2 )
00020a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00020b f570      	BRSH _0x28
                 ; 0000 00EC 	{
                 ; 0000 00ED 		for (j=0;j<8;j++)
                +
00020c e020     +LDI R18 , LOW ( 0 )
00020d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2A:
                +
00020e 3028     +CPI R18 , LOW ( 8 )
00020f e0e0     +LDI R30 , HIGH ( 8 )
000210 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000211 f528      	BRSH _0x2B
                 ; 0000 00EE 		{
                 ; 0000 00EF 			SLAVE_SEL;
000212 98c4      	CBI  0x18,4
                 ; 0000 00F0 			for (k=0;k<i;k++)
                +
000213 e040     +LDI R20 , LOW ( 0 )
000214 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2D:
                +
000215 1740     +CP R20 , R16
000216 0751     +CPC R21 , R17
                 	__CPWRR 20,21,16,17
000217 f420      	BRSH _0x2E
                 ; 0000 00F1 			{
                 ; 0000 00F2 				write_word(0x00,0x00); //sending null character prior to buffer display for character shifting from device to device
000218 d0a5      	RCALL SUBOPT_0x2
                 ; 0000 00F3 			}
                +
000219 5f4f     +SUBI R20 , LOW ( - 1 )
00021a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00021b cff9      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00F4 
                 ; 0000 00F5 			write_word(j+1, buffer[j+i*8]); //sending buffer contents to all devices
00021c 2fe2      	MOV  R30,R18
00021d 5fef      	SUBI R30,-LOW(1)
00021e 93ea      	ST   -Y,R30
                +
00021f e0a8     +LDI R26 , 8
000220 9fa0     +MUL R26 , R16
000221 01f0     +MOVW R30 , R0
000222 9fa1     +MUL R26 , R17
000223 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,8
000224 0fe2      	ADD  R30,R18
000225 1ff3      	ADC  R31,R19
000226 5ae0      	SUBI R30,LOW(-_buffer)
000227 4ffd      	SBCI R31,HIGH(-_buffer)
000228 81a0      	LD   R26,Z
000229 df4d      	RCALL _write_word
                 ; 0000 00F6 
                 ; 0000 00F7 			for (k=DEVICE_NUM-1;k>i;k--)
                +
00022a e041     +LDI R20 , LOW ( 1 )
00022b e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 _0x30:
                +
00022c 1704     +CP R16 , R20
00022d 0715     +CPC R17 , R21
                 	__CPWRR 16,17,20,21
00022e f420      	BRSH _0x31
                 ; 0000 00F8 			{
                 ; 0000 00F9 				write_word(0x00,0x00); //sending null character after buffer display for character shifting from device to device
00022f d08e      	RCALL SUBOPT_0x2
                 ; 0000 00FA 			}
                +
000230 5041     +SUBI R20 , LOW ( 1 )
000231 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
000232 cff9      	RJMP _0x30
                 _0x31:
                 ; 0000 00FB 			SLAVE_DESEL;
000233 9ac4      	SBI  0x18,4
                 ; 0000 00FC 		}
                +
000234 5f2f     +SUBI R18 , LOW ( - 1 )
000235 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000236 cfd7      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00FD 
                 ; 0000 00FE 	}
                +
000237 5f0f     +SUBI R16 , LOW ( - 1 )
000238 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000239 cfce      	RJMP _0x27
                 _0x28:
                 ; 0000 00FF }
00023a d098      	RCALL __LOADLOCR6
00023b 9626      	ADIW R28,6
00023c 9508      	RET
                 ; .FEND
                 ;
                 ;/*************************8x8 LED DOT MATRIX CHARACTER PUSHING FUNCTION**************************/
                 ;void push_char(unsigned int index)
                 ; 0000 0103 {
                 _push_char:
                 ; .FSTART _push_char
                 ; 0000 0104 	unsigned short int i;
                 ; 0000 0105 	for (i=0;i<5;i++)
00023d d084      	RCALL SUBOPT_0x3
                 ;	index -> R18,R19
                 ;	i -> R16,R17
                 _0x33:
                +
00023e 3005     +CPI R16 , LOW ( 5 )
00023f e0e0     +LDI R30 , HIGH ( 5 )
000240 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000241 f470      	BRSH _0x34
                 ; 0000 0106 	{
                 ; 0000 0107 		push_buffer(characters[index][i]); //pushing all columns representing a particular character to the buffer
                +
000242 e0a5     +LDI R26 , 5
000243 9fa2     +MUL R26 , R18
000244 01f0     +MOVW R30 , R0
000245 9fa3     +MUL R26 , R19
000246 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,5
000247 57ea      	SUBI R30,LOW(-_characters)
000248 4ffd      	SBCI R31,HIGH(-_characters)
000249 0fe0      	ADD  R30,R16
00024a 1ff1      	ADC  R31,R17
00024b 81a0      	LD   R26,Z
00024c d07a      	RCALL SUBOPT_0x4
                 ; 0000 0108 		disp_buffer(); //displaying all columns representing a particular character
                 ; 0000 0109 		delay_ms(DELAY);
                 ; 0000 010A 	}
                +
00024d 5f0f     +SUBI R16 , LOW ( - 1 )
00024e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00024f cfee      	RJMP _0x33
                 _0x34:
                 ; 0000 010B }
000250 c012      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;/*************************8x8 LED DOT MATRIX MESSAGE DISPLAYING FUNCTION**************************/
                 ;void disp_message(unsigned int message_size)
                 ; 0000 010F {
                 _disp_message:
                 ; .FSTART _disp_message
                 ; 0000 0110 	unsigned int i;
                 ; 0000 0111 	for (i=0;i<message_size;i++)
000251 d070      	RCALL SUBOPT_0x3
                 ;	message_size -> R18,R19
                 ;	i -> R16,R17
                 _0x36:
                +
000252 1702     +CP R16 , R18
000253 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000254 f470      	BRSH _0x37
                 ; 0000 0112 	{
                 ; 0000 0113 		push_char(message[i]-32); //pushing ascii_val-32 as the index to locate the exact position in the character array for  ...
000255 e7a0      	LDI  R26,LOW(_message)
000256 e0b2      	LDI  R27,HIGH(_message)
000257 0fa0      	ADD  R26,R16
000258 1fb1      	ADC  R27,R17
000259 91ec      	LD   R30,X
00025a e0f0      	LDI  R31,0
00025b 97b0      	SBIW R30,32
00025c 01df      	MOVW R26,R30
00025d dfdf      	RCALL _push_char
                 ; 0000 0114 		push_buffer(0x00); //pushing null character after each character
00025e e0a0      	LDI  R26,LOW(0)
00025f d067      	RCALL SUBOPT_0x4
                 ; 0000 0115 		disp_buffer(); //displaying null for each character
                 ; 0000 0116 		delay_ms(DELAY);
                 ; 0000 0117 	}
                +
000260 5f0f     +SUBI R16 , LOW ( - 1 )
000261 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000262 cfef      	RJMP _0x36
                 _0x37:
                 ; 0000 0118 }
                 _0x20A0003:
000263 d071      	RCALL __LOADLOCR4
000264 9624      	ADIW R28,4
000265 9508      	RET
                 ; .FEND
                 ;
                 ;void disp_off(void)
                 ; 0000 011B {
                 _disp_off:
                 ; .FSTART _disp_off
                 ; 0000 011C 		unsigned short int i;
                 ; 0000 011D 
                 ; 0000 011E 		SLAVE_SEL;
000266 d04c      	RCALL SUBOPT_0x0
                 ;	i -> R16,R17
                 ; 0000 011F 		for (i=0;i<DEVICE_NUM;i++)
                 _0x39:
                +
000267 3002     +CPI R16 , LOW ( 2 )
000268 e0e0     +LDI R30 , HIGH ( 2 )
000269 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00026a f438      	BRSH _0x3A
                 ; 0000 0120 		{
                 ; 0000 0121 			write_word(0x0C, 0x00); // turn display off for all devices
00026b e0ec      	LDI  R30,LOW(12)
00026c 93ea      	ST   -Y,R30
00026d e0a0      	LDI  R26,LOW(0)
00026e df08      	RCALL _write_word
                 ; 0000 0122 		}
                +
00026f 5f0f     +SUBI R16 , LOW ( - 1 )
000270 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000271 cff5      	RJMP _0x39
                 _0x3A:
                 ; 0000 0123 		SLAVE_DESEL;
                 _0x20A0002:
000272 9ac4      	SBI  0x18,4
                 ; 0000 0124 }
                 _0x20A0001:
000273 9109      	LD   R16,Y+
000274 9119      	LD   R17,Y+
000275 9508      	RET
                 ; .FEND
                 ;
                 ;/*************************EXTERNAL INTERRUPT0 SUBROUTINE**************************/
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0128 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000276 920a      	ST   -Y,R0
000277 921a      	ST   -Y,R1
000278 92fa      	ST   -Y,R15
000279 936a      	ST   -Y,R22
00027a 937a      	ST   -Y,R23
00027b 938a      	ST   -Y,R24
00027c 939a      	ST   -Y,R25
00027d 93aa      	ST   -Y,R26
00027e 93ba      	ST   -Y,R27
00027f 93ea      	ST   -Y,R30
000280 93fa      	ST   -Y,R31
000281 b7ef      	IN   R30,SREG
000282 93ea      	ST   -Y,R30
                 ; 0000 0129 
                 ; 0000 012A 	unsigned short int i;
                 ; 0000 012B 
                 ; 0000 012C 	init_spi();
000283 931a      	ST   -Y,R17
000284 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000285 dee9      	RCALL _init_spi
                 ; 0000 012D 	init_matrix();
000286 defe      	RCALL _init_matrix
                 ; 0000 012E 	clear_matrix();
000287 df3a      	RCALL _clear_matrix
                 ; 0000 012F 	init_buffer();
000288 df54      	RCALL _init_buffer
                 ; 0000 0130 
                 ; 0000 0131 	for (i=0;i<3;i++)
                +
000289 e000     +LDI R16 , LOW ( 0 )
00028a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3C:
                +
00028b 3003     +CPI R16 , LOW ( 3 )
00028c e0e0     +LDI R30 , HIGH ( 3 )
00028d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
00028e f428      	BRSH _0x3D
                 ; 0000 0132 	{
                 ; 0000 0133 		disp_message(message_size); // displaying the massage 3 times
00028f 01d2      	MOVW R26,R4
000290 dfc0      	RCALL _disp_message
                 ; 0000 0134 	}
                +
000291 5f0f     +SUBI R16 , LOW ( - 1 )
000292 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000293 cff7      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0135 
                 ; 0000 0136 	for (i=0;i<2;i++)
                +
000294 e000     +LDI R16 , LOW ( 0 )
000295 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3F:
                +
000296 3002     +CPI R16 , LOW ( 2 )
000297 e0e0     +LDI R30 , HIGH ( 2 )
000298 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000299 f428      	BRSH _0x40
                 ; 0000 0137 	{
                 ; 0000 0138 		push_buffer(0x00); // 2 final null character pushes for smoothening the scrolling completion
00029a e0a0      	LDI  R26,LOW(0)
00029b d02b      	RCALL SUBOPT_0x4
                 ; 0000 0139 		disp_buffer();
                 ; 0000 013A 		delay_ms(DELAY);
                 ; 0000 013B 	}
                +
00029c 5f0f     +SUBI R16 , LOW ( - 1 )
00029d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00029e cff7      	RJMP _0x3F
                 _0x40:
                 ; 0000 013C 
                 ; 0000 013D 	disp_off();
00029f dfc6      	RCALL _disp_off
                 ; 0000 013E }
0002a0 9109      	LD   R16,Y+
0002a1 9119      	LD   R17,Y+
0002a2 91e9      	LD   R30,Y+
0002a3 bfef      	OUT  SREG,R30
0002a4 91f9      	LD   R31,Y+
0002a5 91e9      	LD   R30,Y+
0002a6 91b9      	LD   R27,Y+
0002a7 91a9      	LD   R26,Y+
0002a8 9199      	LD   R25,Y+
0002a9 9189      	LD   R24,Y+
0002aa 9179      	LD   R23,Y+
0002ab 9169      	LD   R22,Y+
0002ac 90f9      	LD   R15,Y+
0002ad 9019      	LD   R1,Y+
0002ae 9009      	LD   R0,Y+
0002af 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0141 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0142 
                 ; 0000 0143 	init_interrupt(); //interrupt initialization
0002b0 deb6      	RCALL _init_interrupt
                 ; 0000 0144     while(1)
                 _0x41:
                 ; 0000 0145     {
                 ; 0000 0146 		//disp_message(message_size); //displaying message for unlimited time
                 ; 0000 0147     }
0002b1 cfff      	RJMP _0x41
                 ; 0000 0148 }
                 _0x44:
0002b2 cfff      	RJMP _0x44
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buffer:
000260           	.BYTE 0x10
                 _message:
000270           	.BYTE 0x16
                 _characters:
000286           	.BYTE 0x1E0
                 __seed_G101:
000466           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0002b3 931a      	ST   -Y,R17
0002b4 930a      	ST   -Y,R16
0002b5 98c4      	CBI  0x18,4
                +
0002b6 e000     +LDI R16 , LOW ( 0 )
0002b7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0002b9 9ac4      	SBI  0x18,4
0002ba 98c4      	CBI  0x18,4
                +
0002bb e000     +LDI R16 , LOW ( 0 )
0002bc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0002bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002be e0e0      	LDI  R30,LOW(0)
0002bf 93ea      	ST   -Y,R30
0002c0 e0a0      	LDI  R26,LOW(0)
0002c1 ceb5      	RJMP _write_word
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002c2 d00b      	RCALL __SAVELOCR4
0002c3 019d      	MOVW R18,R26
                +
0002c4 e000     +LDI R16 , LOW ( 0 )
0002c5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0002c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0002c7 df27      	RCALL _push_buffer
0002c8 df3c      	RCALL _disp_buffer
0002c9 e3a2      	LDI  R26,LOW(50)
0002ca e0b0      	LDI  R27,0
0002cb c00e      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002cc 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002cd 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002ce 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002cf 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002d0 931a      	ST   -Y,R17
0002d1 930a      	ST   -Y,R16
0002d2 9508      	RET
                 
                 __LOADLOCR6:
0002d3 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002d4 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002d5 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002d6 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002d7 8119      	LDD  R17,Y+1
0002d8 8108      	LD   R16,Y
0002d9 9508      	RET
                 
                 _delay_ms:
0002da 9610      	adiw r26,0
0002db f039      	breq __delay_ms1
                 __delay_ms0:
0002dc 95a8      	wdr
                +
0002dd ea80     +LDI R24 , LOW ( 0xFA0 )
0002de e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0002df 9701     +SBIW R24 , 1
0002e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0002e1 9711      	sbiw r26,1
0002e2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002e3 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  10 r1 :   3 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  57 r17:  54 r18:  13 r19:  13 r20:   8 r21:   8 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  37 r27:  10 r28:   4 r29:   1 r30:  97 r31:  13 
x  :   6 y  :  60 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   6 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :  18 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :  18 cpi   :  15 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   0 jmp   :  22 ld    :  21 ldd   :   8 ldi   :  82 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   4 movw  :  10 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   4 out   :  13 pop   :   0 push  :   0 rcall :  37 ret   :  12 
reti  :   1 rjmp  :  30 rol   :   0 ror   :   0 sbc   :   0 sbci  :  22 
sbi   :   5 sbic  :   0 sbis  :   2 sbiw  :   6 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  40 std   :   0 sts   :   1 sub   :   0 subi  :  24 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 37 out of 116 (31.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005c8    936    544   1480   32768   4.5%
[.dseg] 0x000060 0x00046a      0    522    522    2048  25.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
